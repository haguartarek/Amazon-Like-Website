@model WebApplication2.ViewModels.ProductCategoryViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@using System.Security.Claims

<link rel="stylesheet" href="~/css/Buyerstylesheet2.css" media="all" />
<h1 id="header">The Marketplace is yours to explore!</h1>
<br />
<hr />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<br />

<div class="row">
    <div class="col-md-3">
        <div class="form-check">
            <label id="headerr">You can pick your category here:</label>
            <hr />
        </div>
        <div class="category-list">
            <div class="vertical-line"></div>
            @foreach (var category in Model.Categories)
            {
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="@category.CategoryId" data-category="@category.CategoryId" />
                    <label class="form-check-label" for="@category.CategoryId">@category.Name</label>
                </div>
            }
        </div>
    </div>
    <div class="col-md-9">
        <input type="text" id="search" class="form-control" placeholder="Search for products..." />
        <br />

        <div id="productList">
            @Html.Partial("_ProductListModalPartial", Model)
        </div>

        @if (string.IsNullOrEmpty("#search"))
        {
            @foreach (var product in Model.Products)
            {
                <div class="col-md-3">
                    <div class="card mb-3 custom-card">
                        <div class="card">
                            <div class="card-body">
                                <div class='product__photo'>
                                    <div class='photo-container'>
                                        <div class='photo-main'>
                                            <div class='controls'>
                                                <img src="data:image/png;base64,@Convert.ToBase64String(product.Image)" alt="Product Image" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text">@product.Description</p>
                                <p class="card-text">Price: @product.Price</p>

                                <form method="post" action="/Buyer/AddToCart">
                                    <input type="hidden" name="productId" value="@product.ProductId" />
                                    <input type="hidden" name="buyerid" value="@User.FindFirst(ClaimTypes.NameIdentifier).Value" />

                                    <br />

                                    <div class="form-group">
                                        <label id="quantityLabel" for="quantity">Quantity:</label>
                                        <input type="number" name="quantity" id="quantity" class="form-control" data-val="true" data-val-required="Please enter a quantity." data-available-quantity="@product.Quantity" />
                                        <br />
                                    </div>
                                    <br />

                                    <div class="footer">
                                        <button type="submit" class="btn btn-primary" id="btnn">Add</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<script>
    // Function to handle form submission
    function validateForm() {
        var quantity = parseInt(document.getElementById('quantity').value);
        var availableQuantity = parseInt(document.getElementById('quantity').getAttribute('data-available-quantity'));

        if (isNaN(quantity) || quantity <= 0) {
            alert('Please enter a valid quantity.');
            return false;
        }

        if (quantity > availableQuantity) {
            alert('Quantity entered exceeds available quantity.');
            return false;
        }

        return true;
    }

    // Add form submission event listener
    document.querySelector('form').addEventListener('submit', function (event) {
        if (!validateForm()) {
            event.preventDefault(); // Prevent form submission if validation fails
        }
    });

    $(document).ready(function () {
        // Add event listener to the search input field
        $('#search').on('keyup', function () {
            var searchQuery = $(this).val();

            // Perform AJAX call to fetch filtered products
            $.ajax({
                url: '/Buyer/SearchProducts',
                type: 'GET',
                data: { searchQuery: searchQuery },
                success: function (data) {
                    // Update the product list with the filtered products or all products
                    if (searchQuery === "") {
                        // Display all products
                        $.ajax({
                            url: '/Buyer/GetAllProducts',
                            type: 'GET',
                            success: function (allProductsData) {
                                $('#productList').html(allProductsData);
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });
                    } else {
                        // Display filtered products
                        $('#productList').html(data);
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        });

        $('.form-check-input').on('change', function () {
            var selectedCategories = [];

            // Get the IDs of selected categories
            $('.form-check-input:checked').each(function () {
                if ($(this).is(':checked')) {
                    selectedCategories.push($(this).data('category'));
                }
            });
            var categoryIdsString = selectedCategories.join(',');
            // Perform AJAX call to fetch filtered products by categories
            $.ajax({
                url: '/Buyer/FilterProductsByCategories?categoryIds=' + categoryIdsString,
                type: 'GET',
                //  data: { categoryIds: selectedCategories },
                success: function (data) {
                    // Update the product list with the filtered products
                    $('#productList').html(data);
                },
                error: function (error) {
                    console.log(error);
                }
            });
        });
    });
</script>